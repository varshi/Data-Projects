{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPS2+FSW5G1cNMKrAXKOOou",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/varshi/Data-Projects/blob/main/Black%20Friday%20Sales%20Data%20Analysis%20and%20Prediction/blackfriday_analysis_prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qwx82Rdw5pN5"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8f285fb2"
      },
      "source": [
        "# Task\n",
        "Analyze the Black Friday sales data from \"/train.csv\", extract key insights, clean the data by intelligently filling null values, run a predictive model on the 'Purchase' variable, and analyze the model results to draw further insights."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4888a91a"
      },
      "source": [
        "## Load the data\n",
        "\n",
        "### Subtask:\n",
        "Load the Black Friday sales data from \"/train.csv\" into a pandas DataFrame.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e9e4d8ea"
      },
      "source": [
        "**Reasoning**:\n",
        "The subtask requires loading the data from a CSV file into a pandas DataFrame. This involves importing the pandas library and using its `read_csv` function.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f56b4f3e"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/train.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "75bc9923"
      },
      "source": [
        "**Reasoning**:\n",
        "The data has been loaded into the DataFrame `df`. The next step is to display the first few rows of the DataFrame to verify the loading process and understand the data structure, which was part of the initial plan to understand the data.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "e147d1f3",
        "outputId": "bd7bf81c-3d09-4fa7-e3bb-fa584dd181d6"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
              "0  1000001  P00069042      F  0-17          10             A   \n",
              "1  1000001  P00248942      F  0-17          10             A   \n",
              "2  1000001  P00087842      F  0-17          10             A   \n",
              "3  1000001  P00085442      F  0-17          10             A   \n",
              "4  1000002  P00285442      M   55+          16             C   \n",
              "\n",
              "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
              "0                          2               0                   3   \n",
              "1                          2               0                   1   \n",
              "2                          2               0                  12   \n",
              "3                          2               0                  12   \n",
              "4                         4+               0                   8   \n",
              "\n",
              "   Product_Category_2  Product_Category_3  Purchase  \n",
              "0                 NaN                 NaN      8370  \n",
              "1                 6.0                14.0     15200  \n",
              "2                 NaN                 NaN      1422  \n",
              "3                14.0                 NaN      1057  \n",
              "4                 NaN                 NaN      7969  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e54e65e3-c5c2-4af2-8d6f-e1f02ebbfed4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>M</td>\n",
              "      <td>55+</td>\n",
              "      <td>16</td>\n",
              "      <td>C</td>\n",
              "      <td>4+</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e54e65e3-c5c2-4af2-8d6f-e1f02ebbfed4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e54e65e3-c5c2-4af2-8d6f-e1f02ebbfed4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e54e65e3-c5c2-4af2-8d6f-e1f02ebbfed4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2d4c2e45-cb1c-45b5-a847-49b46607091b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d4c2e45-cb1c-45b5-a847-49b46607091b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2d4c2e45-cb1c-45b5-a847-49b46607091b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fc10c819"
      },
      "source": [
        "## Initial data exploration\n",
        "\n",
        "### Subtask:\n",
        "Get a sense of the data by looking at the first few rows, checking data types, and summarizing the key columns.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "110082e5"
      },
      "source": [
        "**Reasoning**:\n",
        "Display the first 5 rows of the DataFrame to get a visual overview of the data structure and content, print the data types of each column to understand the data types of each variable, generate descriptive statistics for the numerical columns to get a summary of their distribution, central tendency, and variability, and generate descriptive statistics for the categorical columns to understand the frequency of unique values.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0c005777",
        "outputId": "2ec3598c-d861-4c53-8228-21affaf72c55"
      },
      "source": [
        "display(df.head())\n",
        "display(df.info())\n",
        "display(df.describe())\n",
        "display(df.describe(include='object'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
              "0  1000001  P00069042      F  0-17          10             A   \n",
              "1  1000001  P00248942      F  0-17          10             A   \n",
              "2  1000001  P00087842      F  0-17          10             A   \n",
              "3  1000001  P00085442      F  0-17          10             A   \n",
              "4  1000002  P00285442      M   55+          16             C   \n",
              "\n",
              "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
              "0                          2               0                   3   \n",
              "1                          2               0                   1   \n",
              "2                          2               0                  12   \n",
              "3                          2               0                  12   \n",
              "4                         4+               0                   8   \n",
              "\n",
              "   Product_Category_2  Product_Category_3  Purchase  \n",
              "0                 NaN                 NaN      8370  \n",
              "1                 6.0                14.0     15200  \n",
              "2                 NaN                 NaN      1422  \n",
              "3                14.0                 NaN      1057  \n",
              "4                 NaN                 NaN      7969  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5bcb3813-bd20-4913-ae71-b02020e88fd7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>M</td>\n",
              "      <td>55+</td>\n",
              "      <td>16</td>\n",
              "      <td>C</td>\n",
              "      <td>4+</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bcb3813-bd20-4913-ae71-b02020e88fd7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5bcb3813-bd20-4913-ae71-b02020e88fd7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5bcb3813-bd20-4913-ae71-b02020e88fd7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-16c38e88-d27b-43b9-a2b5-7cddeec80742\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16c38e88-d27b-43b9-a2b5-7cddeec80742')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-16c38e88-d27b-43b9-a2b5-7cddeec80742 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"User_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1000001,\n        \"max\": 1000002,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1000002,\n          1000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"P00248942\",\n          \"P00285442\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"55+\",\n          \"0-17\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 10,\n        \"max\": 16,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          16,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City_Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C\",\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stay_In_Current_City_Years\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"4+\",\n          \"2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Marital_Status\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Category_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Category_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.656854249492381,\n        \"min\": 6.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Category_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 14.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5837,\n        \"min\": 1057,\n        \"max\": 15200,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          15200\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 550068 entries, 0 to 550067\n",
            "Data columns (total 12 columns):\n",
            " #   Column                      Non-Null Count   Dtype  \n",
            "---  ------                      --------------   -----  \n",
            " 0   User_ID                     550068 non-null  int64  \n",
            " 1   Product_ID                  550068 non-null  object \n",
            " 2   Gender                      550068 non-null  object \n",
            " 3   Age                         550068 non-null  object \n",
            " 4   Occupation                  550068 non-null  int64  \n",
            " 5   City_Category               550068 non-null  object \n",
            " 6   Stay_In_Current_City_Years  550068 non-null  object \n",
            " 7   Marital_Status              550068 non-null  int64  \n",
            " 8   Product_Category_1          550068 non-null  int64  \n",
            " 9   Product_Category_2          376430 non-null  float64\n",
            " 10  Product_Category_3          166821 non-null  float64\n",
            " 11  Purchase                    550068 non-null  int64  \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 50.4+ MB\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            User_ID     Occupation  Marital_Status  Product_Category_1  \\\n",
              "count  5.500680e+05  550068.000000   550068.000000       550068.000000   \n",
              "mean   1.003029e+06       8.076707        0.409653            5.404270   \n",
              "std    1.727592e+03       6.522660        0.491770            3.936211   \n",
              "min    1.000001e+06       0.000000        0.000000            1.000000   \n",
              "25%    1.001516e+06       2.000000        0.000000            1.000000   \n",
              "50%    1.003077e+06       7.000000        0.000000            5.000000   \n",
              "75%    1.004478e+06      14.000000        1.000000            8.000000   \n",
              "max    1.006040e+06      20.000000        1.000000           20.000000   \n",
              "\n",
              "       Product_Category_2  Product_Category_3       Purchase  \n",
              "count       376430.000000       166821.000000  550068.000000  \n",
              "mean             9.842329           12.668243    9263.968713  \n",
              "std              5.086590            4.125338    5023.065394  \n",
              "min              2.000000            3.000000      12.000000  \n",
              "25%              5.000000            9.000000    5823.000000  \n",
              "50%              9.000000           14.000000    8047.000000  \n",
              "75%             15.000000           16.000000   12054.000000  \n",
              "max             18.000000           18.000000   23961.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f34060f-4b38-4416-b0bb-71451ed2737e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5.500680e+05</td>\n",
              "      <td>550068.000000</td>\n",
              "      <td>550068.000000</td>\n",
              "      <td>550068.000000</td>\n",
              "      <td>376430.000000</td>\n",
              "      <td>166821.000000</td>\n",
              "      <td>550068.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.003029e+06</td>\n",
              "      <td>8.076707</td>\n",
              "      <td>0.409653</td>\n",
              "      <td>5.404270</td>\n",
              "      <td>9.842329</td>\n",
              "      <td>12.668243</td>\n",
              "      <td>9263.968713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.727592e+03</td>\n",
              "      <td>6.522660</td>\n",
              "      <td>0.491770</td>\n",
              "      <td>3.936211</td>\n",
              "      <td>5.086590</td>\n",
              "      <td>4.125338</td>\n",
              "      <td>5023.065394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000001e+06</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.001516e+06</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>5823.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.003077e+06</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>8047.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.004478e+06</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>12054.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.006040e+06</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>23961.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f34060f-4b38-4416-b0bb-71451ed2737e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7f34060f-4b38-4416-b0bb-71451ed2737e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7f34060f-4b38-4416-b0bb-71451ed2737e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-efbf2471-be1e-4ca4-8fd6-e27019e9ebc7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-efbf2471-be1e-4ca4-8fd6-e27019e9ebc7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-efbf2471-be1e-4ca4-8fd6-e27019e9ebc7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"User_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 367117.89753373514,\n        \"min\": 1727.5915855306216,\n        \"max\": 1006040.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1003028.8424013031,\n          1003077.0,\n          550068.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Occupation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194475.49735336297,\n        \"min\": 0.0,\n        \"max\": 550068.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.076706879876669,\n          7.0,\n          550068.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Marital_Status\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194478.25991330712,\n        \"min\": 0.0,\n        \"max\": 550068.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.40965298835780306,\n          1.0,\n          0.4917701263166973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Category_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194476.16701795225,\n        \"min\": 1.0,\n        \"max\": 550068.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          550068.0,\n          5.404270017525106,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Category_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 133084.87402923752,\n        \"min\": 2.0,\n        \"max\": 376430.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.842329251122386,\n          9.0,\n          376430.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product_Category_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58976.2517540914,\n        \"min\": 3.0,\n        \"max\": 166821.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.668243206790512,\n          14.0,\n          166821.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 191363.80903912007,\n        \"min\": 12.0,\n        \"max\": 550068.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9263.968712959126,\n          8047.0,\n          550068.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       Product_ID  Gender     Age City_Category Stay_In_Current_City_Years\n",
              "count      550068  550068  550068        550068                     550068\n",
              "unique       3631       2       7             3                          5\n",
              "top     P00265242       M   26-35             B                          1\n",
              "freq         1880  414259  219587        231173                     193821"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d3ae1f9-2362-4207-b47c-77851c1430c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>550068</td>\n",
              "      <td>550068</td>\n",
              "      <td>550068</td>\n",
              "      <td>550068</td>\n",
              "      <td>550068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>3631</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>P00265242</td>\n",
              "      <td>M</td>\n",
              "      <td>26-35</td>\n",
              "      <td>B</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1880</td>\n",
              "      <td>414259</td>\n",
              "      <td>219587</td>\n",
              "      <td>231173</td>\n",
              "      <td>193821</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d3ae1f9-2362-4207-b47c-77851c1430c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d3ae1f9-2362-4207-b47c-77851c1430c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d3ae1f9-2362-4207-b47c-77851c1430c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-85dfe4bf-9e68-4d70-9484-4d69961ae1d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-85dfe4bf-9e68-4d70-9484-4d69961ae1d4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-85dfe4bf-9e68-4d70-9484-4d69961ae1d4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Product_ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3631,\n          \"1880\",\n          \"550068\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"414259\",\n          \"550068\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          \"219587\",\n          \"550068\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City_Category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"231173\",\n          \"550068\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stay_In_Current_City_Years\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          \"193821\",\n          \"550068\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WARNING: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e2ab03c3"
      },
      "source": [
        "## Handle missing values\n",
        "\n",
        "### Subtask:\n",
        "Identify and address any missing values in the dataset. We'll need to decide on an intelligent strategy for filling these based on the data's characteristics.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2dc4ab65"
      },
      "source": [
        "**Reasoning**:\n",
        "Calculate and display the number and percentage of missing values for each column, then fill missing values in 'Product_Category_2' and 'Product_Category_3' with 0.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "b974ceea",
        "outputId": "7dae096d-58c4-4d92-b2f3-f77b31c2e323"
      },
      "source": [
        "missing_values = df.isnull().sum()\n",
        "missing_percentage = (missing_values / len(df)) * 100\n",
        "\n",
        "print(\"Number of missing values per column:\")\n",
        "display(missing_values)\n",
        "print(\"\\nPercentage of missing values per column:\")\n",
        "display(missing_percentage)\n",
        "\n",
        "df['Product_Category_2'] = df['Product_Category_2'].fillna(0)\n",
        "df['Product_Category_3'] = df['Product_Category_3'].fillna(0)\n",
        "\n",
        "print(\"\\nMissing values after filling:\")\n",
        "display(df.isnull().sum())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of missing values per column:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "User_ID                            0\n",
              "Product_ID                         0\n",
              "Gender                             0\n",
              "Age                                0\n",
              "Occupation                         0\n",
              "City_Category                      0\n",
              "Stay_In_Current_City_Years         0\n",
              "Marital_Status                     0\n",
              "Product_Category_1                 0\n",
              "Product_Category_2            173638\n",
              "Product_Category_3            383247\n",
              "Purchase                           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>173638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>383247</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Percentage of missing values per column:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "User_ID                        0.000000\n",
              "Product_ID                     0.000000\n",
              "Gender                         0.000000\n",
              "Age                            0.000000\n",
              "Occupation                     0.000000\n",
              "City_Category                  0.000000\n",
              "Stay_In_Current_City_Years     0.000000\n",
              "Marital_Status                 0.000000\n",
              "Product_Category_1             0.000000\n",
              "Product_Category_2            31.566643\n",
              "Product_Category_3            69.672659\n",
              "Purchase                       0.000000\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>31.566643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>69.672659</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Missing values after filling:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "User_ID                       0\n",
              "Product_ID                    0\n",
              "Gender                        0\n",
              "Age                           0\n",
              "Occupation                    0\n",
              "City_Category                 0\n",
              "Stay_In_Current_City_Years    0\n",
              "Marital_Status                0\n",
              "Product_Category_1            0\n",
              "Product_Category_2            0\n",
              "Product_Category_3            0\n",
              "Purchase                      0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ef28c375"
      },
      "source": [
        "## Data cleaning and preparation\n",
        "\n",
        "### Subtask:\n",
        "Clean the data by handling any inconsistencies or outliers and prepare it for modeling. This might involve encoding categorical variables or scaling numerical features.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3fe8f38e"
      },
      "source": [
        "**Reasoning**:\n",
        "Inspect unique values of categorical columns, convert \"4+\" in 'Stay_In_Current_City_Years' to 4, apply one-hot encoding to categorical columns, and display the head and info of the processed DataFrame.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "id": "6c6b025c",
        "outputId": "a8baafb4-e76d-4df5-a519-904969f9be60"
      },
      "source": [
        "categorical_cols = ['Gender', 'Age', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status']\n",
        "\n",
        "for col in categorical_cols:\n",
        "    print(f\"Unique values in {col}: {df[col].unique()}\")\n",
        "\n",
        "df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].replace('4+', '4').astype(int)\n",
        "\n",
        "df_processed = pd.get_dummies(df, columns=categorical_cols, drop_first=True)\n",
        "\n",
        "display(df_processed.head())\n",
        "display(df_processed.info())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique values in Gender: ['F' 'M']\n",
            "Unique values in Age: ['0-17' '55+' '26-35' '46-50' '51-55' '36-45' '18-25']\n",
            "Unique values in City_Category: ['A' 'C' 'B']\n",
            "Unique values in Stay_In_Current_City_Years: ['2' '4+' '3' '1' '0']\n",
            "Unique values in Marital_Status: [0 1]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   User_ID Product_ID  Occupation  Product_Category_1  Product_Category_2  \\\n",
              "0  1000001  P00069042          10                   3                 0.0   \n",
              "1  1000001  P00248942          10                   1                 6.0   \n",
              "2  1000001  P00087842          10                  12                 0.0   \n",
              "3  1000001  P00085442          10                  12                14.0   \n",
              "4  1000002  P00285442          16                   8                 0.0   \n",
              "\n",
              "   Product_Category_3  Purchase  Gender_M  Age_18-25  Age_26-35  ...  \\\n",
              "0                 0.0      8370     False      False      False  ...   \n",
              "1                14.0     15200     False      False      False  ...   \n",
              "2                 0.0      1422     False      False      False  ...   \n",
              "3                 0.0      1057     False      False      False  ...   \n",
              "4                 0.0      7969      True      False      False  ...   \n",
              "\n",
              "   Age_46-50  Age_51-55  Age_55+  City_Category_B  City_Category_C  \\\n",
              "0      False      False    False            False            False   \n",
              "1      False      False    False            False            False   \n",
              "2      False      False    False            False            False   \n",
              "3      False      False    False            False            False   \n",
              "4      False      False     True            False             True   \n",
              "\n",
              "   Stay_In_Current_City_Years_1  Stay_In_Current_City_Years_2  \\\n",
              "0                         False                          True   \n",
              "1                         False                          True   \n",
              "2                         False                          True   \n",
              "3                         False                          True   \n",
              "4                         False                         False   \n",
              "\n",
              "   Stay_In_Current_City_Years_3  Stay_In_Current_City_Years_4  \\\n",
              "0                         False                         False   \n",
              "1                         False                         False   \n",
              "2                         False                         False   \n",
              "3                         False                         False   \n",
              "4                         False                          True   \n",
              "\n",
              "   Marital_Status_1  \n",
              "0             False  \n",
              "1             False  \n",
              "2             False  \n",
              "3             False  \n",
              "4             False  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8af4aef3-afff-4716-bd69-9af68b301fba\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "      <th>Gender_M</th>\n",
              "      <th>Age_18-25</th>\n",
              "      <th>Age_26-35</th>\n",
              "      <th>...</th>\n",
              "      <th>Age_46-50</th>\n",
              "      <th>Age_51-55</th>\n",
              "      <th>Age_55+</th>\n",
              "      <th>City_Category_B</th>\n",
              "      <th>City_Category_C</th>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <th>Stay_In_Current_City_Years_4</th>\n",
              "      <th>Marital_Status_1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8370</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1422</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1057</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>16</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7969</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8af4aef3-afff-4716-bd69-9af68b301fba')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8af4aef3-afff-4716-bd69-9af68b301fba button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8af4aef3-afff-4716-bd69-9af68b301fba');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-983ffcad-ab83-4910-a3ec-409a88e13248\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-983ffcad-ab83-4910-a3ec-409a88e13248')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-983ffcad-ab83-4910-a3ec-409a88e13248 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 550068 entries, 0 to 550067\n",
            "Data columns (total 21 columns):\n",
            " #   Column                        Non-Null Count   Dtype  \n",
            "---  ------                        --------------   -----  \n",
            " 0   User_ID                       550068 non-null  int64  \n",
            " 1   Product_ID                    550068 non-null  object \n",
            " 2   Occupation                    550068 non-null  int64  \n",
            " 3   Product_Category_1            550068 non-null  int64  \n",
            " 4   Product_Category_2            550068 non-null  float64\n",
            " 5   Product_Category_3            550068 non-null  float64\n",
            " 6   Purchase                      550068 non-null  int64  \n",
            " 7   Gender_M                      550068 non-null  bool   \n",
            " 8   Age_18-25                     550068 non-null  bool   \n",
            " 9   Age_26-35                     550068 non-null  bool   \n",
            " 10  Age_36-45                     550068 non-null  bool   \n",
            " 11  Age_46-50                     550068 non-null  bool   \n",
            " 12  Age_51-55                     550068 non-null  bool   \n",
            " 13  Age_55+                       550068 non-null  bool   \n",
            " 14  City_Category_B               550068 non-null  bool   \n",
            " 15  City_Category_C               550068 non-null  bool   \n",
            " 16  Stay_In_Current_City_Years_1  550068 non-null  bool   \n",
            " 17  Stay_In_Current_City_Years_2  550068 non-null  bool   \n",
            " 18  Stay_In_Current_City_Years_3  550068 non-null  bool   \n",
            " 19  Stay_In_Current_City_Years_4  550068 non-null  bool   \n",
            " 20  Marital_Status_1              550068 non-null  bool   \n",
            "dtypes: bool(14), float64(2), int64(4), object(1)\n",
            "memory usage: 36.7+ MB\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "42288603"
      },
      "source": [
        "## Exploratory data analysis (eda)\n",
        "\n",
        "### Subtask:\n",
        "Dive deeper into the data to find key insights. This could involve visualizing relationships between variables, looking at distributions, and identifying trends.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "03604153"
      },
      "source": [
        "**Reasoning**:\n",
        "Create the specified plots to visualize the relationships between different variables and the 'Purchase' amount.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "17cf1a3e",
        "outputId": "c559af1e-bb0f-4026-cd5b-f2300638affc"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(df['Purchase'], bins=50, kde=True)\n",
        "plt.title('Distribution of Purchase Amount')\n",
        "plt.xlabel('Purchase Amount')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(x='Gender', y='Purchase', data=df)\n",
        "plt.title('Average Purchase Amount by Gender')\n",
        "plt.xlabel('Gender')\n",
        "plt.ylabel('Average Purchase Amount')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Age', y='Purchase', data=df, order=df['Age'].sort_values().unique())\n",
        "plt.title('Average Purchase Amount by Age Group')\n",
        "plt.xlabel('Age Group')\n",
        "plt.ylabel('Average Purchase Amount')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(x='City_Category', y='Purchase', data=df)\n",
        "plt.title('Average Purchase Amount by City Category')\n",
        "plt.xlabel('City Category')\n",
        "plt.ylabel('Average Purchase Amount')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(x='Marital_Status', y='Purchase', data=df)\n",
        "plt.title('Average Purchase Amount by Marital Status')\n",
        "plt.xlabel('Marital Status (0: Unmarried, 1: Married)')\n",
        "plt.ylabel('Average Purchase Amount')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(x='Stay_In_Current_City_Years', y='Purchase', data=df)\n",
        "plt.title('Average Purchase Amount by Years in Current City')\n",
        "plt.xlabel('Years in Current City')\n",
        "plt.ylabel('Average Purchase Amount')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(15, 6))\n",
        "plt.subplot(1, 3, 1)\n",
        "sns.barplot(x='Product_Category_1', y='Purchase', data=df)\n",
        "plt.title('Avg Purchase by Product Category 1')\n",
        "plt.xlabel('Product Category 1')\n",
        "plt.ylabel('Average Purchase')\n",
        "\n",
        "plt.subplot(1, 3, 2)\n",
        "sns.barplot(x='Product_Category_2', y='Purchase', data=df)\n",
        "plt.title('Avg Purchase by Product Category 2')\n",
        "plt.xlabel('Product Category 2')\n",
        "plt.ylabel('Average Purchase')\n",
        "\n",
        "plt.subplot(1, 3, 3)\n",
        "sns.barplot(x='Product_Category_3', y='Purchase', data=df)\n",
        "plt.title('Avg Purchase by Product Category 3')\n",
        "plt.xlabel('Product Category 3')\n",
        "plt.ylabel('Average Purchase')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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nj166aWX5ObmpsDAQA0bNuyJXCMAAACeLhkagL/66itNnDhR48eP18GDB/XVV19p2LBhGjdunLnPsGHDNHbsWE2aNEnbt29XlixZFBYWpps3b5r7tG7dWvv379eqVau0dOlSbdiwQZ07dzZvj4+PV506dZQvXz5FRUXp66+/1qBBgzR58uQner0AAADIeJky8uRbtmxR48aNVb9+fUlSUFCQZs+erR07dki6M/o7evRoffzxx2rcuLEk6fvvv5e/v78WL16sli1b6uDBg1q+fLl+//13lStXTpI0btw41atXT8OHD1fu3LkVGRmphIQETZs2TS4uLipRooR27dqlkSNHWgRlAAAAPPsydAS4cuXKWr16tf766y9J0u7du7Vp0ya98sorkqQTJ04oOjpatWvXNu/j4+OjkJAQbd26VZK0detWZc2a1Rx+Jal27dpycnLS9u3bzX1CQ0Pl4uJi7hMWFqbDhw/r0qVLqeq6deuW4uPjLR4AAAB4NmToCHC/fv0UHx+vokWLytnZWUlJSfriiy/UunVrSVJ0dLQkyd/f32I/f39/87bo6GjlzJnTYnumTJmULVs2iz758+dPdYyUbb6+vhbbhgwZosGDB9voKgEAAPA0ydAR4Hnz5ikyMlKzZs3Szp07NWPGDA0fPlwzZszIyLLUv39/xcXFmR+nT5/O0HoAAABgOxk6Avzhhx+qX79+atmypSSpVKlS+vvvvzVkyBCFh4crICBAkhQTE6NcuXKZ94uJiVGZMmUkSQEBAYqNjbU47u3bt3Xx4kXz/gEBAYqJibHok/I8pc/dXF1d5erqapuLBAAAwFMlQ0eAr1+/LicnyxKcnZ2VnJwsScqfP78CAgK0evVq8/b4+Hht375dlSpVkiRVqlRJly9fVlRUlLnPmjVrlJycrJCQEHOfDRs2KDEx0dxn1apVKlKkSKrpDwAAAHi2ZWgAbtiwob744gv98ssvOnnypBYtWqSRI0eqadOmkiSTyaTu3bvr888/15IlS7R371699dZbyp07t5o0aSJJKlasmOrWratOnTppx44d2rx5s7p27aqWLVsqd+7ckqRWrVrJxcVFHTp00P79+zV37lyNGTNGPXv2zKhLBwAAQAbJ0CkQ48aN0yeffKL33ntPsbGxyp07t95++20NGDDA3KdPnz66du2aOnfurMuXL6tq1apavny5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fn6p9n3Yde7evVsRERHme+fp6amwsDAlJyfrxIkTOnjwoDJlymTxdShatGiabyp1d3dP9/ct8F9AAAaeUe3bt1dERIRmzJhx3//5NmzYUBcvXtSUKVO0fft2bd++XVLqN9pkyZLF6vOfPHlSDRo00AsvvKAFCxYoKipKEyZMSPP4D5MnTx61adNG48eP1/79+3Xz5s00/2Se4tq1awoLC5O3t7ciIyP1+++/m/8s/rBzOzk5pZpDeveczMDAQB0+fFjffPON3N3d9d577yk0NNSiz91y5MihS5cuWbQFBAQoISEh1UoDMTExCggIeGB9d/P29pZ0Z07xvS5fvpxqNYDMmTOb/53yRqm7p7vcvT2lT1ptKftYc5/Teg097HV19epVBQcHa9euXRaPv/76S61atXrgvhktZU59hw4ddPPmzTRXtti6datat26tevXqaenSpfrzzz/10Ucfpfv7Lz337+2337a4d7t379aRI0csftFJj4sXL6YZwoH/qkwZXQAA+0iZJ2kymVLN25WkCxcu6PDhw5oyZYpeeuklSXfmqz6KtFZliIqKUnJyskaMGGFe/WDevHmPdPy7+fr6KleuXOY38qR17kOHDunChQsaOnSoAgMDJSnVOqYuLi6SlGpfPz8/i9Hl+Ph4nThxwqKPu7u7GjZsqIYNG6pLly4qWrSo9u7dqxdffDFVvWXLllV0dLQuXbokX19fSXdGPjNnzqzVq1erWbNmku7MRT516pQqVaqU7ntRuHBhOTk5KSoqSvny5TO3Hz9+XHFxcXr++efTfaxHkZ77/DhefPFFzZ07Vzlz5jSH/XvlypVL27dvV2hoqCTp9u3bioqKSvNr8aS1b99e9erVU9++feXs7Jxq+5YtW5QvXz599NFH5ra///7bZud/8cUXdeDAARUqVCjN7UWLFjXfr/Lly0u68zpMawm4ffv2pXoTLfBfxggw8IxydnbWwYMHdeDAgTT/5+vr66vs2bNr8uTJOnr0qNasWaOePXs+0rmCgoJ04sQJ7dq1S+fPn9etW7dUqFAhJSYmaty4cTp+/Lhmzpz5wFHbtHz77bd69913tXLlSh07dkz79+9X3759tX//fvOqCkFBQbp69apWr16t8+fP6/r168qbN69cXFzM516yZIk+++wzi2Pny5dPJpNJS5cu1blz58yrU9SsWVMzZ87Uxo0btXfvXoWHh1vcv4iICE2dOlX79u3T8ePH9cMPP8jd3d0igN6tbNmyypEjhzZv3mxu8/HxUYcOHdSzZ0+tXbtWUVFRateunSpVqmSxCkGtWrU0fvz4+94fLy8vdezYUb169dKSJUt04sQJbdiwQa1bt1bFihVVuXJlq+63tdJznx9H69atlSNHDjVu3FgbN27UiRMntG7dOr3//vv6559/JEkffPCBhg4dqsWLF+vQoUN67733HmkN3+joaO3atUtHjx6VJO3du1e7du3SxYsXzX3eeust9e/fP93HrFu3rs6dO6dPP/00ze2FCxfWqVOnNGfOHB07dkxjx4616Rv4+vbtqy1btqhr167atWuXjhw5op9++sk8raZIkSKqW7eu3n77bW3fvl1RUVHq2LGj3N3dUx1r48aNqlOnjs1qAzIaARh4hnl7e9935MzJyUlz5sxRVFSUSpYsqR49eujrr79+pPM0a9ZMdevWVY0aNeTn56fZs2erdOnSGjlypL766iuVLFlSkZGR6Z4/maJChQq6evWq3nnnHZUoUULVqlXTtm3btHjxYvNc08qVK+udd97R66+/Lj8/Pw0bNkx+fn6KiIjQ/PnzVbx4cQ0dOlTDhw+3OHaePHk0ePBg9evXT/7+/uZQ0L9/f1WrVk0NGjRQ/fr11aRJE4s/F2fNmlVTpkxRlSpV9MILL+i3337Tzz//rOzZs6d5Dc7OzmrXrl2q5aVGjRqlBg0aqFmzZgoNDVVAQIDF0nXSnXfxnz9//oH3aMyYMQoPD1ffvn1VokQJtW3bVi+88IJ+/vlnm68He6/03OfH4eHhoQ0bNihv3rx69dVXVaxYMfOUgpTXda9evdSmTRuFh4erUqVK8vLyUtOmTS2OExER8dB7MWnSJJUtW1adOnWSdOeT+8qWLaslS5aY+5w6deqhc8/vZjKZlCNHDvNfG+7VqFEj9ejRQ127dlWZMmW0ZcsWffLJJ+k+/sO88MILWr9+vf766y+99NJLKlu2rAYMGKDcuXOb+0yfPl25c+dWtWrV9Oqrr6pz586p1vjeunWr4uLi1Lx5c5vVBmQ0k3HvZDcAgE1FR0erRIkS2rlz531HimE/AwcO1Pr16+32CWzPutdff12lS5e2yYeEAE8LRoABwM4CAgI0derUx16BAo9m2bJlGjZsWEaX8Z+UkJCgUqVKqUePHhldCmBTjAADAADAoTACDAAAAIdCAAYAAIBDIQADAADAoRCAAQAA4FAIwAAAAHAoBGAAAAA4FAIwAAAAHAoBGAAAAA6FAAwAAACH8v8ApjXeQ01Syc8AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4064d01b"
      },
      "source": [
        "## Feature engineering (if needed)\n",
        "\n",
        "### Subtask:\n",
        "Create new features from existing ones that might improve the predictive model's performance.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f9116429"
      },
      "source": [
        "**Reasoning**:\n",
        "Calculate the total number of products purchased, the average purchase amount, and the total purchase amount for each user and add these as new columns to the `df_processed` DataFrame.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "a03d6561",
        "outputId": "839427d7-5f52-44ce-e7e6-83d46ea16e98"
      },
      "source": [
        "total_products_purchased = df_processed.groupby('User_ID').size().reset_index(name='total_products_purchased')\n",
        "df_processed = pd.merge(df_processed, total_products_purchased, on='User_ID', how='left')\n",
        "\n",
        "average_purchase_amount = df_processed.groupby('User_ID')['Purchase'].mean().reset_index(name='average_user_purchase')\n",
        "df_processed = pd.merge(df_processed, average_purchase_amount, on='User_ID', how='left')\n",
        "\n",
        "total_user_purchase = df_processed.groupby('User_ID')['Purchase'].sum().reset_index(name='total_user_purchase')\n",
        "df_processed = pd.merge(df_processed, total_user_purchase, on='User_ID', how='left')\n",
        "\n",
        "display(df_processed.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   User_ID Product_ID  Occupation  Product_Category_1  Product_Category_2  \\\n",
              "0  1000001  P00069042          10                   3                 0.0   \n",
              "1  1000001  P00248942          10                   1                 6.0   \n",
              "2  1000001  P00087842          10                  12                 0.0   \n",
              "3  1000001  P00085442          10                  12                14.0   \n",
              "4  1000002  P00285442          16                   8                 0.0   \n",
              "\n",
              "   Product_Category_3  Purchase  Gender_M  Age_18-25  Age_26-35  ...  \\\n",
              "0                 0.0      8370     False      False      False  ...   \n",
              "1                14.0     15200     False      False      False  ...   \n",
              "2                 0.0      1422     False      False      False  ...   \n",
              "3                 0.0      1057     False      False      False  ...   \n",
              "4                 0.0      7969      True      False      False  ...   \n",
              "\n",
              "   City_Category_B  City_Category_C  Stay_In_Current_City_Years_1  \\\n",
              "0            False            False                         False   \n",
              "1            False            False                         False   \n",
              "2            False            False                         False   \n",
              "3            False            False                         False   \n",
              "4            False             True                         False   \n",
              "\n",
              "   Stay_In_Current_City_Years_2  Stay_In_Current_City_Years_3  \\\n",
              "0                          True                         False   \n",
              "1                          True                         False   \n",
              "2                          True                         False   \n",
              "3                          True                         False   \n",
              "4                         False                         False   \n",
              "\n",
              "   Stay_In_Current_City_Years_4  Marital_Status_1  total_products_purchased  \\\n",
              "0                         False             False                        35   \n",
              "1                         False             False                        35   \n",
              "2                         False             False                        35   \n",
              "3                         False             False                        35   \n",
              "4                          True             False                        77   \n",
              "\n",
              "   average_user_purchase  total_user_purchase  \n",
              "0            9545.514286               334093  \n",
              "1            9545.514286               334093  \n",
              "2            9545.514286               334093  \n",
              "3            9545.514286               334093  \n",
              "4           10525.610390               810472  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-81b4cc8f-8606-4535-8a9f-791d9f4fc95e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "      <th>Gender_M</th>\n",
              "      <th>Age_18-25</th>\n",
              "      <th>Age_26-35</th>\n",
              "      <th>...</th>\n",
              "      <th>City_Category_B</th>\n",
              "      <th>City_Category_C</th>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <th>Stay_In_Current_City_Years_4</th>\n",
              "      <th>Marital_Status_1</th>\n",
              "      <th>total_products_purchased</th>\n",
              "      <th>average_user_purchase</th>\n",
              "      <th>total_user_purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8370</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>35</td>\n",
              "      <td>9545.514286</td>\n",
              "      <td>334093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>35</td>\n",
              "      <td>9545.514286</td>\n",
              "      <td>334093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1422</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>35</td>\n",
              "      <td>9545.514286</td>\n",
              "      <td>334093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1057</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>35</td>\n",
              "      <td>9545.514286</td>\n",
              "      <td>334093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>16</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7969</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>77</td>\n",
              "      <td>10525.610390</td>\n",
              "      <td>810472</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81b4cc8f-8606-4535-8a9f-791d9f4fc95e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-81b4cc8f-8606-4535-8a9f-791d9f4fc95e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-81b4cc8f-8606-4535-8a9f-791d9f4fc95e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f86a4e38-0b95-4995-8681-402089f5277f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f86a4e38-0b95-4995-8681-402089f5277f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f86a4e38-0b95-4995-8681-402089f5277f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "732def44"
      },
      "source": [
        "## Model selection and training\n",
        "\n",
        "### Subtask:\n",
        "Choose an appropriate predictive model for the 'Purchase' variable and train it on the prepared data.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4521f746"
      },
      "source": [
        "**Reasoning**:\n",
        "Import necessary libraries, define features and target, split data, instantiate and train a RandomForestRegressor model.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "dc61a481",
        "outputId": "123fac0a-d567-450f-d872-a25b6616f3b8"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "X = df_processed.drop(['User_ID', 'Product_ID', 'Purchase'], axis=1)\n",
        "y = df_processed['Purchase']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = RandomForestRegressor(n_estimators=10, random_state=42, n_jobs=-1)\n",
        "\n",
        "model.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(n_estimators=10, n_jobs=-1, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=10, n_jobs=-1, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(n_estimators=10, n_jobs=-1, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "77a28f36"
      },
      "source": [
        "## Model evaluation\n",
        "\n",
        "### Subtask:\n",
        "Evaluate the trained model's performance using relevant metrics.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e7254d9b"
      },
      "source": [
        "**Reasoning**:\n",
        "Evaluate the trained model's performance using relevant metrics.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53980784",
        "outputId": "315c9feb-4d7b-4550-fb53-480a08b1d4a4"
      },
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n",
        "print(f\"R-squared (R2) Score: {r2}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error (MAE): 2161.9225884252955\n",
            "Mean Squared Error (MSE): 8999953.607929323\n",
            "Root Mean Squared Error (RMSE): 2999.9922679782567\n",
            "R-squared (R2) Score: 0.6418097129106892\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5169cbda"
      },
      "source": [
        "## Analyze model results\n",
        "\n",
        "### Subtask:\n",
        "Interpret the model's results to draw further insights about the factors influencing 'Purchase'.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0c9a05f4"
      },
      "source": [
        "**Reasoning**:\n",
        "Get the feature importances from the trained model and display them to identify the most influential factors.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 759
        },
        "id": "64ca1107",
        "outputId": "ab65e096-ae26-4d7a-eac8-fc00bff42b91"
      },
      "source": [
        "feature_importances = pd.Series(model.feature_importances_, index=X_train.columns)\n",
        "sorted_feature_importances = feature_importances.sort_values(ascending=False)\n",
        "\n",
        "print(\"Sorted Feature Importances:\")\n",
        "display(sorted_feature_importances)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted Feature Importances:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Product_Category_1              0.714880\n",
              "average_user_purchase           0.084579\n",
              "Product_Category_2              0.039629\n",
              "total_user_purchase             0.030584\n",
              "Product_Category_3              0.028824\n",
              "total_products_purchased        0.026182\n",
              "Occupation                      0.023202\n",
              "Marital_Status_1                0.005441\n",
              "Stay_In_Current_City_Years_1    0.004793\n",
              "Age_26-35                       0.004615\n",
              "City_Category_B                 0.004295\n",
              "Gender_M                        0.004050\n",
              "Stay_In_Current_City_Years_3    0.003937\n",
              "Age_18-25                       0.003891\n",
              "Stay_In_Current_City_Years_2    0.003809\n",
              "Age_36-45                       0.003760\n",
              "Stay_In_Current_City_Years_4    0.003730\n",
              "City_Category_C                 0.003412\n",
              "Age_46-50                       0.002466\n",
              "Age_51-55                       0.002339\n",
              "Age_55+                         0.001583\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0.714880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>average_user_purchase</th>\n",
              "      <td>0.084579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>0.039629</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_user_purchase</th>\n",
              "      <td>0.030584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>0.028824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_products_purchased</th>\n",
              "      <td>0.026182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0.023202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status_1</th>\n",
              "      <td>0.005441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <td>0.004793</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_26-35</th>\n",
              "      <td>0.004615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category_B</th>\n",
              "      <td>0.004295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender_M</th>\n",
              "      <td>0.004050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <td>0.003937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_18-25</th>\n",
              "      <td>0.003891</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <td>0.003809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_36-45</th>\n",
              "      <td>0.003760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_4</th>\n",
              "      <td>0.003730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category_C</th>\n",
              "      <td>0.003412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_46-50</th>\n",
              "      <td>0.002466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_51-55</th>\n",
              "      <td>0.002339</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age_55+</th>\n",
              "      <td>0.001583</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5fd5cefd"
      },
      "source": [
        "## Summarize key insights\n",
        "\n",
        "### Subtask:\n",
        "Consolidate all the insights gained from the EDA and model analysis.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "684b6807"
      },
      "source": [
        "**Reasoning**:\n",
        "Synthesize the insights from EDA and model analysis to create a comprehensive summary of the key factors influencing purchase behavior.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "909719c4",
        "outputId": "df4ead65-ff49-41f8-d370-f362a524d281"
      },
      "source": [
        "print(\"Comprehensive Summary of Factors Influencing Purchase Amount:\")\n",
        "print(\"\\nInsights from Exploratory Data Analysis (EDA):\")\n",
        "print(\"- The distribution of Purchase amount is somewhat right-skewed, suggesting a higher frequency of lower-value purchases with fewer high-value transactions.\")\n",
        "print(\"- Average Purchase Amount by Gender: Males have a slightly higher average purchase amount than females.\")\n",
        "print(\"- Average Purchase Amount by Age Group: There are variations in average purchase across age groups, with some groups showing slightly higher spending.\")\n",
        "print(\"- Average Purchase Amount by City Category: City Category 'C' shows a higher average purchase amount compared to 'A' and 'B'.\")\n",
        "print(\"- Average Purchase Amount by Marital Status: There is no significant difference in average purchase based on marital status.\")\n",
        "print(\"- Average Purchase Amount by Years in Current City: Average purchase amounts are relatively consistent across different durations of stay.\")\n",
        "print(\"- Average Purchase Amount by Product Categories: Certain Product Categories (especially in Category 1, 2, and 3) have significantly higher average purchase amounts, indicating their higher price points or popularity.\")\n",
        "\n",
        "print(\"\\nInsights from Model Analysis (Feature Importances):\")\n",
        "print(\"- Product_Category_1 is by far the most important feature influencing Purchase, with a significantly higher importance score.\")\n",
        "print(\"- average_user_purchase and total_user_purchase are the next most important features, highlighting the significance of historical user spending behavior.\")\n",
        "print(\"- Product_Category_2 and Product_Category_3 also contribute to predicting Purchase, but to a lesser extent than Product_Category_1.\")\n",
        "print(\"- Other features like Occupation, Marital Status, Stay In Current City Years, Age, City Category, and Gender have relatively low feature importances according to the model.\")\n",
        "\n",
        "print(\"\\nSynthesized Insights:\")\n",
        "print(\"- Both EDA and model analysis consistently highlight the crucial role of Product Categories, particularly Product_Category_1, in determining purchase amounts. This suggests that the type of product being purchased is the primary driver of transaction value.\")\n",
        "print(\"- The model analysis further emphasizes the importance of user-specific historical purchase behavior (average and total purchase amount per user), which was explored through feature engineering. This indicates that past spending habits are strong predictors of future purchase values.\")\n",
        "print(\"- While EDA showed some differences in average purchase based on Gender, Age, and City Category, the model's feature importances suggest that these demographic and location factors have a much smaller impact on predicting the specific purchase amount compared to product categories and user purchase history.\")\n",
        "print(\"- Marital Status and Stay In Current City Years appear to have minimal influence on purchase amount based on both EDA and model analysis.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Comprehensive Summary of Factors Influencing Purchase Amount:\n",
            "\n",
            "Insights from Exploratory Data Analysis (EDA):\n",
            "- The distribution of Purchase amount is somewhat right-skewed, suggesting a higher frequency of lower-value purchases with fewer high-value transactions.\n",
            "- Average Purchase Amount by Gender: Males have a slightly higher average purchase amount than females.\n",
            "- Average Purchase Amount by Age Group: There are variations in average purchase across age groups, with some groups showing slightly higher spending.\n",
            "- Average Purchase Amount by City Category: City Category 'C' shows a higher average purchase amount compared to 'A' and 'B'.\n",
            "- Average Purchase Amount by Marital Status: There is no significant difference in average purchase based on marital status.\n",
            "- Average Purchase Amount by Years in Current City: Average purchase amounts are relatively consistent across different durations of stay.\n",
            "- Average Purchase Amount by Product Categories: Certain Product Categories (especially in Category 1, 2, and 3) have significantly higher average purchase amounts, indicating their higher price points or popularity.\n",
            "\n",
            "Insights from Model Analysis (Feature Importances):\n",
            "- Product_Category_1 is by far the most important feature influencing Purchase, with a significantly higher importance score.\n",
            "- average_user_purchase and total_user_purchase are the next most important features, highlighting the significance of historical user spending behavior.\n",
            "- Product_Category_2 and Product_Category_3 also contribute to predicting Purchase, but to a lesser extent than Product_Category_1.\n",
            "- Other features like Occupation, Marital Status, Stay In Current City Years, Age, City Category, and Gender have relatively low feature importances according to the model.\n",
            "\n",
            "Synthesized Insights:\n",
            "- Both EDA and model analysis consistently highlight the crucial role of Product Categories, particularly Product_Category_1, in determining purchase amounts. This suggests that the type of product being purchased is the primary driver of transaction value.\n",
            "- The model analysis further emphasizes the importance of user-specific historical purchase behavior (average and total purchase amount per user), which was explored through feature engineering. This indicates that past spending habits are strong predictors of future purchase values.\n",
            "- While EDA showed some differences in average purchase based on Gender, Age, and City Category, the model's feature importances suggest that these demographic and location factors have a much smaller impact on predicting the specific purchase amount compared to product categories and user purchase history.\n",
            "- Marital Status and Stay In Current City Years appear to have minimal influence on purchase amount based on both EDA and model analysis.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e60a1d3a"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The distribution of Purchase amount is somewhat right-skewed.\n",
        "*   Males have a slightly higher average purchase amount than females.\n",
        "*   City Category 'C' shows a higher average purchase amount compared to 'A' and 'B'.\n",
        "*   There is no significant difference in average purchase based on marital status or years in the current city.\n",
        "*   Certain Product Categories (especially in Category 1) have significantly higher average purchase amounts.\n",
        "*   Missing values in 'Product_Category_2' (31.57%) and 'Product_Category_3' (69.67%) were filled with 0.\n",
        "*   The feature 'Product\\_Category\\_1' is the most important factor influencing Purchase according to the trained Random Forest model.\n",
        "*   User-specific purchase history features (`average_user_purchase` and `total_user_purchase`) are the next most important features.\n",
        "*   Demographic features like Gender, Age, City Category, Marital Status, and Stay In Current City Years have relatively low feature importances in the model.\n",
        "*   The Random Forest Regressor model achieved an R2 score of 0.64 on the test set.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   Focus marketing and inventory efforts on high-value product categories, especially Product Category 1, and target users with higher historical purchase values.\n",
        "*   Explore more advanced feature engineering techniques or different regression models to potentially improve the predictive performance, especially considering the remaining unexplained variance (R2 score of 0.64).\n"
      ]
    }
  ]
}